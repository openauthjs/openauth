---
import { Image } from 'astro:assets';
import type { Props } from '@astrojs/starlight/props';
import config from '../../config';

const { data } = Astro.props.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

const imageAttrs = {
    loading: 'eager' as const,
    decoding: 'async' as const,
    width: 400,
    alt: image?.alt || '',
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
    if ('file' in image) {
        darkImage = image.file;
    } else if ('dark' in image) {
        darkImage = image.dark;
        lightImage = image.light;
    } else {
        rawHtml = image.html;
    }
}
---
<div class="hero">
    <section class="top">
      <div class="logo">
        <Image
          src={darkImage}
          {...imageAttrs}
          class:list={{ 'light:sl-hidden': Boolean(lightImage) }}
        />
        <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden" />
      </div>
      <h1>Universal, standards-based auth provider.</h1>
    </section>

    <section class="cta">
      <div class="col1">
        <a href="https://www.youtube.com/watch?v=SSjNUuQ06tk" target="_blank">Learn more</a>
      </div>
      <div class="col2">
      <a href="/docs">View the docs</a>
      </div>
      <div class="col3">
        <a href={config.github}>Star on GitHub</a>
      </div>
    </section>

    <section class="content">
      <ul>
        <li><b>Universal</b>: You can deploy it as a standalone service or embed it into an existing application. It works with any framework or platform.</li>
        <li><b>Self-hosted</b>: It runs entirely on your infrastructure and can be deployed on Node.js, Bun, AWS Lambda, or Cloudflare Workers.</li>
        <li><b>Standards-based</b>: It implements the OAuth 2.0 spec and is based on web standards. So any OAuth client can use it.</li>
        <li><b>Customizable</b>: It comes with prebuilt themeable UI that you can customize or opt out of.</li>
      </ul>
    </section>

    <section class="footer">
      <div class="col1">
        <span>Version: Beta</span>
      </div>
      <div class="col2">
        <span>Author: <a href="https://sst.dev">SST</a></span>
      </div>
    </section>
</div>

<style>
.hero {
  --padding: 3rem;
  --vertical-padding: 2rem;
  --heading-font-size: var(--sl-text-3xl);

  margin: 1rem;
  border: 2px solid var(--sl-color-white);
}
@media (max-width: 30rem) {
  .hero {
    --padding: 1rem;
    --vertical-padding: 1rem;
    --heading-font-size: var(--sl-text-2xl);

    margin: 0.5rem;
  }
}

section.top {
  padding: var(--padding);

  h1 {
    margin-top: calc(var(--vertical-padding) / 8);
    font-size: var(--heading-font-size);
    line-height: 1.25;
    text-transform: uppercase;
  }

  img {
    height: auto;
    width: clamp(200px, 70vw, 400px);
  }
}

section.cta {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  border-top: 2px solid var(--sl-color-white);

  & > div {
    flex: 1;
    line-height: 1.4;
    text-align: center;
    text-transform: uppercase;
    padding: calc(var(--padding) / 2) 0.5rem;
  }

  @media (max-width: 30rem) {
    & > div {
      padding-bottom: calc(var(--padding) / 2 + 4px);
    }
  }

  & > div + div {
    border-left: 2px solid var(--sl-color-white);
  }
}

section.content {
  border-top: 2px solid var(--sl-color-white);
  padding: var(--padding);

  ul {
    padding-left: 1rem;

    li + li {
      margin-top: calc(var(--vertical-padding) / 2);
    }

    li b {
      text-transform: uppercase;
    }
  }
}

section.approach {
  border-top: 2px solid var(--sl-color-white);
  padding: var(--padding);

  p + p {
    margin-top: var(--vertical-padding);
  }
}

section.footer {
  border-top: 2px solid var(--sl-color-white);
  display: flex;
  flex-direction: row;

  & > div {
    flex: 1;
    text-align: center;
    text-transform: uppercase;
    padding: calc(var(--padding) / 2) 0.5rem;
  }

  & > div + div {
    border-left: 2px solid var(--sl-color-white);
  }
}
</style>
